package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"ozon-graphql-api/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	return r.Repos.PostRepository.CreatePost(ctx, input)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment, err := r.Repos.CommentRepository.CreateComment(ctx, input)
	if err != nil {
		return nil, err
	}

	if channel, found := r.Subscribers[input.PostID]; found {
		go func() {
			channel <- comment
		}()
	}

	return comment, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	return r.Repos.PostRepository.Posts(ctx, limit, offset)
}

// PostByID is the resolver for the postById field.
func (r *queryResolver) PostByID(ctx context.Context, id int) (*model.Post, error) {
	return r.Repos.PostRepository.PostByID(ctx, id)
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, limit *int, offset *int) ([]*model.Comment, error) {
	return r.Repos.CommentRepository.Comments(ctx, limit, offset)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	commentChannel := make(chan *model.Comment)

	// Добавляем канал в список подписчиков
	r.Subscribers[postID] = commentChannel

	go func() {
		<-ctx.Done()
		delete(r.Subscribers, postID)
		close(commentChannel)
	}()

	return commentChannel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
